library(datasets)
data(iris)
iris
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
iris[,1:4]
help(gl)
help(split)
split(iris, Species)
split(iris, iris$Species)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species)$Sepal.length, mean)
split(iris, iris$Species)$Sepal.length
split(iris, iris$Species)[1]
split(iris, iris$Species)[1]$Sepal.length
split(iris, iris$Species)[1][1]
split(iris, iris$Species)
x <- split(iris, iris$Species)
x
x[,1]
x[,,1]
x$virginica
x$virginica[1]
x$virginica[1]
mean(x$virginica[1])
mean(x$virginica[[1]])
lapply(split(iris, iris$Species)[,1:3], mean)
lapply(split(iris, iris$Species)[1:3], mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.length, iris$Species)
tapply(iris$Sepal.length, iris$Species, mean)
iris
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x[1] - x[2]
x[2] - x[3]
x[1] - x[3]
mtcars
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
x[1] - x[3]
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# The following function returns the inverse of the original matrix input to makeCacheMatrix().
# If the inverse has already been computed, get it from the cache and skips the computation.
# the inverse has already been computed. If so, it gets the result and skips thecomputation.
# Otherwise it computes the inverse of matrix and sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
s <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(m)
}
data <- x$get()
s <- solve(data, ...)
x$setinverse(s)
m
}
x <- makeCacheMatrix()
b <- matrix(1:4, 2, 2)
x$set(b)
x$get()
cacheSolve(x)
pwd
pwd()
cwd()
pcd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "quiz1.csv")
myData <- read.csv(file="quiz1.csv", header=TRUE, sep=",")
milDolHomes <- myData[myData$VAL > 1000000]
milDolHomes <- myData[VAL > 1000000]
myData$VAL
milDolHomes <- myData$VAL > 1000000
milDolHomes <- myData$VAL == 24
sum(milDolHomes)
cleanedUp <- !is.na(myData$VAL)
cleaned.data <- myData$VAL[cleanedUp]
milDolHomes <- cleaned.data == 24
sum(milDolHomes)
library("xlsx")
library(xlsx)
package("xlsx")
package(xlsx)
install.packages("xlsx")
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destFile = "quiz1_q3.xlsx")
download.file(fileUrl, destfile = "quiz1_q3.xlsx")
dat <- read.xlsx("quiz1_q3.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex =  7:15)
dat <- read.xlsx("quiz1_q3.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex =  7:15)
dat <- read.xlsx("quiz1_q3.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex =  7:15)
library("xlsx")
rowIdx <- 18:23
colIdx <- 7:15
dat <- read.xlsx("quiz1_q3.xlsx", sheetIndex = 1, rowIndex = rowIdx, colIndex = colIdx)
dat <- read.xlsx("quiz1_q3.xlsx", rowIndex = rowIdx, colIndex = colIdx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx"")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx")
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", rowIndex = rowIdx, colIndex = colIdx)
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = rowIdx, colIndex = colIdx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx", mode="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1.xlsx", method="auto")
dat <- read.xlsx("getdata-data.xlsx", sheetIndex = 1, rowIndex = rowIdx, colIndex = colIdx)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.package("xml")
package.install("xml")
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata-data-Frestaurants.xml"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
doc <- xmlTreeParse(fileURL)
fileURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
?xmlTreeParse
doc <- xmlParse(fileURL, useInternal=TRUE)
doc <- htmlParse(fileURL, useInternal=TRUE)
doc <- xmlTreeParse(fileURL, useInternal=TRUE, isURL=TRUE)
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
?fread
install.packages(data.table)
install.packages("data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
?fread
fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT[,mean(pwgtp15),by=SEX]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library("ggplot2")
install.library("ggplot2")
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
rawData <- read.csv("activity.csv")
pwd
cwd
printwd
pwd()
cwd()
printwd()
getwd()
setwd("GitHub")
getwd()
setwd("RepData_PeerAssessment1/")
getwd()
rawData <- read.csv("activity.csv")
summary(rawData)
str(rawData)
rawData$date
rawData$date <- as.Date(rawData$date, format = "%m/%d/%Y")
rawData$date
str(rawData)
aggregate(steps ~ date, rawData, sum)
aggregate(date ~ steps, rawData, sum)
library(data.table)
dt <- data.table(rawData)
DT[, sum(steps), by = date]
dt[, sum(steps), by = date]
rawData$date
dt[, sum(steps), by = date, rm.NA=TRUE]
dt[, sum(steps), by = date, na.rm=TRUE]
dt[, sum(steps), by = date]
dt
head(dt)
dt
dt[, sum(steps), by = date]
str(rawData)
sum(rawData.steps)
sum(rawData$steps)
summary(rawData$steps)
cleanData <- rawData[complete.cases(rawData),]
cleanData
rm(cleanData)
rm(dt)
notNA <- !is.na(rawData.steps)
notNA <- !is.na(rawData$steps)
sum(notNA)
cleanData <- rawData[!is.na(rawData$steps),]
summary(rawData$steps)
dt <- data.table(rawData)
dt[, sum(steps), by = date]
head(dt)
cleanData <- rawData[rawData$steps != NA,]
cleanData <- rawData[!is.na(rawData$steps),]
rm (dt)
dt <- data.table(cleanData)
dt[, sum(steps), by = date]
head(dt)
notNA <- !is.na(cleanData$date)
sum(notNA)
rawData <- read.csv("activity.csv")
cleanData <- rawData[complete.cases(rawData),]
dt <- data.table(cleanData)
dt[, sum(steps), by = date]
meanSteps <- mean(dt$steps)
medianSteps <- median(dt$steps)
meanSteps
medianSteps
summary(dt$steps)
dt[, steps = sum(steps), by = date]
dt[, steps as sum(steps), by = date]
dt[, sum(steps), by = date]
byDate <- dt[, sum(steps), by = date]
meanSteps <- mean(byDate$V1)
mean(byDate$V1)
median(byDate$V1)
View(cleanData)
View(cleanData)
?hist
View(cleanData)
View(cleanData)
?plot
